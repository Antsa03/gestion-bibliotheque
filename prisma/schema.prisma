generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id   Int        @id @default(autoincrement())
  name      String     @db.Text
  firstname String     @db.Text
  address   String     @db.Text
  phone     String     @db.VarChar(12)
  role      String     @db.Text
  email     String     @unique
  password  String     @db.Text
  sanctions Sanction[]
  emprunts  Emprunt[]
}

model Auteur {
  auteur_id  Int     @id @default(autoincrement())
  auteur_nom String
  livres     Livre[]
}

model Sanction {
  sanction_id    Int      @id @default(autoincrement())
  sanction_deb   DateTime @db.Date
  sanction_fin   DateTime @db.Date
  sanction_motif String   @db.Text
  user_id        Int
  user           User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
}

model Emprunt {
  emprunt_id            Int        @id @default(autoincrement())
  emprunt_date          DateTime   @db.Date
  emprunt_retour        DateTime?  @db.Date //Pas de champ d'input
  emprunt_retour_prevue DateTime   @db.Date
  emprunt_statut        Boolean    @default(true) //Pas de champ d'input
  user_id               Int
  code_barre            String
  user                  User       @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
  exemplaire            Exemplaire @relation(fields: [code_barre], references: [code_barre], onDelete: Cascade, onUpdate: Cascade)
}

model Livre {
  livre_id        Int          @id @default(autoincrement())
  titre           String       @db.Text
  nb_pages        Int
  description     String       @db.Text
  type_livre      String       @db.Text
  domaine         String       @db.Text
  couverture      String       @db.Text //Input de type fichier (image)
  livre_numerique String?       @db.Text //Input de fichier fichier (document)
  auteur_id       Int
  proprietaire_id Int
  exemplaires     Exemplaire[]
  auteur          Auteur       @relation(fields: [auteur_id], references: [auteur_id], onDelete: Cascade, onUpdate: Cascade)
  proprietaire    Proprietaire @relation(fields: [proprietaire_id], references: [proprietaire_id], onDelete: Cascade, onUpdate: Cascade)
}

model Exemplaire {
  code_barre String    @id // Utilisation du code-barres comme cl√© primaire
  cote       String    @db.Text
  livre_id   Int
  disponible Boolean   @default(true) //Pas de champs d'input
  livre      Livre     @relation(fields: [livre_id], references: [livre_id], onDelete: Cascade, onUpdate: Cascade)
  emprunts   Emprunt[]
}

model Proprietaire {
  proprietaire_id  Int     @id @default(autoincrement())
  proprietaire_nom String  @db.Text
  livres           Livre[]
}
